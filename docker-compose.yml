version: '3.8'

services:
  # OPAL Server - manages policy and data distribution
  opal-server:
    image: permitio/opal-server:latest
    environment:
      # Policy repository configuration - using GitHub with local policies  
      - OPAL_POLICY_REPO_URL=https://github.com/plduser/opa-zero-poll-single-topic-multi-tenant.git
      - OPAL_POLICY_REPO_MAIN_BRANCH=main
      - OPAL_POLICY_REPO_POLLING_INTERVAL=30
      - OPAL_POLICY_REPO_SSH_KEY=""
      - OPAL_POLICY_REPO_PATH=policies
      # Data sources configuration - using single topic approach
      - 'OPAL_DATA_CONFIG_SOURCES={"config": {"entries": []}}'
      # Server configuration
      - OPAL_LOG_LEVEL=INFO
      - OPAL_SERVER_URL=http://opal-server:7002
    volumes:
      - ./policies:/app/policies:ro  
    ports:
      - "7002:7002"
    networks:
      - opal-network

  # OPAL Client - fetches policies and data, manages OPA
  opal-client:
    image: permitio/opal-client:latest
    environment:
      # Server connection
      - OPAL_SERVER_URL=http://opal-server:7002
      
      # OPA configuration
      - OPAL_POLICY_STORE_URL=http://opa:8181
      
      # REVOLUTIONARY SINGLE TOPIC CONFIGURATION
      # Instead of: tenant_1_data,tenant_2_data,tenant_3_data
      # We use: tenant_data (single topic for all tenants)
      - OPAL_DATA_UPDATER_ENABLED=true
      - OPAL_DATA_TOPICS=tenant_data
      
      # Data fetcher configuration
      - OPAL_FETCH_WORKER_POOLS=1
      - OPAL_FETCH_TIMEOUT=30
      
      # Logging
      - OPAL_LOG_LEVEL=DEBUG
    extra_hosts:
      - "host.docker.internal:host-gateway"
    ports:
      - "7001:7001"
    depends_on:
      - opal-server
      - opa
    networks:
      - opal-network

  # Open Policy Agent - policy engine
  opa:
    image: openpolicyagent/opa:latest
    ports:
      - "8181:8181"
      - "8282:8282"
    command:
      - "run"
      - "--server"
      - "--addr=0.0.0.0:8181"
      - "--diagnostic-addr=0.0.0.0:8282"
    networks:
      - opal-network

  # Simple API Provider - serves tenant-specific data
  simple-api-provider:
    image: nginx:alpine
    ports:
      - "8090:80"
    volumes:
      - ./simple-api-provider/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - opal-network

networks:
  opal-network:
    driver: bridge

# Usage Instructions:
# 
# 1. Start the services:
#    docker-compose -f docker-compose-single-topic-multi-tenant.yml up -d
#
# 2. Wait for services to be ready (check logs):
#    docker-compose -f docker-compose-single-topic-multi-tenant.yml logs -f opal-client
#
# 3. Add tenant1 data (no restart needed):
#    curl -X POST http://localhost:7002/data/config \
#      -H "Content-Type: application/json" \
#      -d '{
#        "entries": [{
#          "url": "http://simple-api-provider:80/acl/tenant1",
#          "topics": ["tenant_data"],
#          "dst_path": "/acl/tenant1"
#        }],
#        "reason": "Load tenant1 data via single topic"
#      }'
#
# 4. Add tenant2 data (NO RESTART NEEDED!):
#    curl -X POST http://localhost:7002/data/config \
#      -H "Content-Type: application/json" \
#      -d '{
#        "entries": [{
#          "url": "http://simple-api-provider:80/acl/tenant2",
#          "topics": ["tenant_data"],
#          "dst_path": "/acl/tenant2"
#        }],
#        "reason": "Load tenant2 data via single topic - NO RESTART"
#      }'
#
# 5. Verify data isolation:
#    curl -s http://localhost:8181/v1/data/acl/tenant1 | jq .
#    curl -s http://localhost:8181/v1/data/acl/tenant2 | jq .
#
# 6. Check all data:
#    curl -s http://localhost:8181/v1/data/acl | jq .
#
# Key Benefits Demonstrated:
# - ✅ Single topic handles multiple tenants
# - ✅ No restart needed when adding new tenants  
# - ✅ Data isolation through OPA path hierarchy
# - ✅ Real-time tenant addition
# - ✅ Simplified configuration management 